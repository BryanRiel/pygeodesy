#!/usr/bin/env python3
#-*- coding: utf-8 -*-

import pygeodesy as pg
import argparse
import sys

def parse():
    parser = argparse.ArgumentParser(description="""
    pygeodesy - Python module for reading and processing geodetic time series data.""")
   
    # Define subparsers for each module 
    subparsers = parser.add_subparsers(help='Module options', dest='module')

    # Options for makedb
    dbparser = subparsers.add_parser('makedb', help='Create database from time series.')
    dbparser.add_argument('-cfg', action='store', default='data.cfg',
        help='Database configuration file. Default: data.cfg.')
    dbparser.add_argument('-v', '-V', action='store_true', dest='verbose',
        help='Verbose mode.')

    # Options for subnet
    subnet = subparsers.add_parser('subnet', help='Extract sub-network from database.')
    subnet.add_argument('-cfg', action='store', default='data.cfg',
        help='Subset network configuration file. Default: data.cfg.')

    # Option for detrend
    detrend = subparsers.add_parser('detrend', help='Detrend time series in database.')
    detrend.add_argument('-cfg', action='store', default='data.cfg',
        help='Detrend configuration file. Default: data.cfg.')

    return parser.parse_args()
    

if __name__ == '__main__':

    # Get the command line options
    inputs = parse()

    # Parse the configuration file for the given module
    config = pg.Configuration(inputs.cfg, inputs.module)

    # Run the appropriate module
    if inputs.module == 'makedb':
        pg.db.makedb(config())

    elif inputs.module == 'subnet':
        pg.db.subnet(config())

    elif inputs.module == 'detrend':
        pg.network.detrend(config())

    else:
        print('Module', inputs.module, 'is not supported')

        
# end of file
